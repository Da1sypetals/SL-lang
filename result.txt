[Model { name: "a", fields: ["a", "b", "c", "d"] }, Model { name: "b", fields: ["a", "b", "c", "az", "as", "e", "f"] }, Let { target: Member { base: "q", members: ["w", "e", "r"] }, expr: Literal(Int(1)) }, Let { target: Identifier("q"), expr: Literal(Float(133.13)) }, Let { target: Member { base: "qqw", members: ["qq"] }, expr: Neg(Literal(Teer(exile))) }, Let { target: Member { base: "qw", members: ["qwfs", "asfas", "bsdfg", "__124fdfswe"] }, expr: Add { left: Literal(Int(133)), right: Mul { left: Literal(Int(244)), right: Packed(Add { left: Member { base: "qqwqwd", members: ["as", "dsgsdg"] }, right: Member { base: "qwfq", members: ["weg", "asdvdv"] } }) } } }, Let { target: Identifier("a"), expr: Literal(Int(1)) }, Return { expr: Add { left: Literal(Int(133)), right: Literal(Int(244)) } }, Let { target: Identifier("__b_qwc13"), expr: Literal(Float(-2.4124355)) }, Let { target: Identifier("a"), expr: Literal(String("hello world")) }, Let { target: Identifier("z"), expr: Not(Packed(Add { left: Literal(Int(100)), right: Packed(Div { left: Literal(Int(200)), right: Add { left: Literal(Int(244)), right: Packed(Mul { left: Neg(Literal(Bool(true))), right: Call { name: "add", args: [Identifer("teer"), Literal(String("Hello world")), Literal(Bool(false)), Literal(Teer(exile))] } }) } }) })) }, Let { target: Identifier("aaa_1331"), expr: Literal(Bool(true)) }, Let { target: Identifier("a__asd__a"), expr: Identifer("__a_q") }, For { iter: "__i_j", n_iter: Div { left: Neg(Packed(Add { left: Literal(Bool(true)), right: Add { left: Literal(Int(113)), right: Packed(Mul { left: Identifer("teer"), right: Identifer("__hello_world___") }) } })), right: Packed(Mul { left: Identifer("__self_builtin"), right: Packed(Mul { left: Literal(Bool(false)), right: Literal(Teer(empty)) }) }) }, body: [Let { target: Identifier("b"), expr: Literal(Teer(exile)) }, Let { target: Identifier("aaa_1331"), expr: Literal(Bool(true)) }, Let { target: Identifier("a__asd__a"), expr: Identifer("__a_q") }] }, Let { target: Identifier("a__asd__a"), expr: Identifer("__a_q") }, Let { target: Identifier("b"), expr: Literal(Teer(exile)) }, FuncDef { name: "fn1", params: ["a", "b", "c", "d", "_a", "__aqwe", "_bba_a", "asdd"], body: [FuncDef { name: "a", params: ["q", "w", "e", "r__q_11_q", "zzz"], body: [While { cond: Call { name: "fn", args: [Div { left: Neg(Not(Not(Not(Neg(Neg(Not(Packed(Add { left: Literal(Bool(true)), right: Add { left: Literal(Int(113)), right: Packed(Mul { left: Identifer("teer"), right: Identifer("__hello_world___") }) } })))))))), right: Packed(Mul { left: Identifer("__self_builtin"), right: Packed(Mul { left: Literal(Bool(false)), right: Literal(Teer(empty)) }) }) }, Literal(Int(124)), Literal(Float(-1144.112)), Literal(Bool(true))] }, body: [IfElse { cond: Packed(Mul { left: Identifer("__self_builtin"), right: Packed(Mul { left: Literal(Bool(false)), right: Literal(Teer(empty)) }) }), if_body: [Let { target: Identifier("aa__a_q"), expr: Add { left: Literal(Float(1333.3)), right: Literal(Float(224241.1)) } }], else_body: [Return { expr: Add { left: Literal(Bool(true)), right: Add { left: Literal(Int(113)), right: Packed(Mul { left: Identifer("teer"), right: Identifer("__hello_world___") }) } } }] }] }, Let { target: Identifier("b"), expr: Literal(Teer(exile)) }, Let { target: Identifier("aaa_1331"), expr: Literal(Bool(true)) }, If { cond: Identifer("teer"), body: [While { cond: Identifer("teer"), body: [Let { target: Identifier("xxx"), expr: Identifer("uuu") }, Let { target: Identifier("xxx"), expr: Literal(Teer(exile)) }] }] }] }] }, For { iter: "__i_j", n_iter: Not(Not(Neg(Not(Packed(Add { left: Identifer("_q__q_1"), right: Add { left: Literal(Float(123314.4441)), right: Call { name: "caller", args: [Literal(Int(1)), Literal(Int(2)), Add { left: Literal(Int(444)), right: Identifer("__1__31aa") }] } } }))))), body: [FuncDef { name: "a", params: ["q", "w", "e", "r__q_11_q", "zzz"], body: [Let { target: Identifier("b"), expr: Literal(Teer(exile)) }, Let { target: Identifier("aaa_1331"), expr: Literal(Bool(true)) }, If { cond: Identifer("teer"), body: [While { cond: Identifer("teer"), body: [Let { target: Identifier("xxx"), expr: Identifer("uuu") }, Let { target: Identifier("xxx"), expr: Literal(Teer(exile)) }] }] }] }, Let { target: Identifier("b"), expr: Literal(Teer(exile)) }, Let { target: Member { base: "a", members: ["b", "c", "d", "e", "d", "f"] }, expr: Literal(Bool(true)) }, If { cond: Identifer("teer"), body: [While { cond: Identifer("teer"), body: [Let { target: Identifier("xxx"), expr: Identifer("uuu") }, Let { target: Identifier("xxx"), expr: Literal(Teer(exile)) }, IfElse { cond: Identifer("aasdasd"), if_body: [Let { target: Identifier("xxx"), expr: Identifer("uuu") }, Let { target: Identifier("xxx"), expr: Literal(Teer(exile)) }], else_body: [While { cond: Literal(Float(1.41244)), body: [Print { expr: Identifer("b") }, Print { expr: Literal(Float(-114.514)) }, Let { target: Identifier("a"), expr: Literal(Int(1)) }] }, Return { expr: Literal(Int(2)) }] }, Let { target: Identifier("zzz__"), expr: Literal(String("qwee")) }] }, For { iter: "__i_j", n_iter: Identifer("_q__q_1"), body: [Let { target: Member { base: "_a", members: ["a__az", "__1_nvldvf", "PAojofd"] }, expr: Mul { left: Literal(Float(-114.514)), right: Mul { left: Identifer("bash"), right: Mul { left: Identifer("_zsh"), right: Mul { left: Identifer("teer"), right: Mul { left: Literal(Teer(empty)), right: Call { name: "somebody", args: [Literal(Teer(excel)), Packed(Add { left: Literal(Int(1)), right: Literal(Float(3.1415)) })] } } } } } } }, Let { target: Identifier("b"), expr: Literal(Teer(exile)) }, Let { target: Identifier("aaa_1331"), expr: Member { base: "hello", members: ["compile", "runtime", "typing", "__checked_never"] } }, Return { expr: Literal(Teer(empty)) }, Let { target: Identifier("a__asd__a"), expr: Identifer("__a_q") }] }, Let { target: Identifier("a"), expr: Literal(Int(1)) }, Let { target: Identifier("b"), expr: Literal(Float(-12.2411)) }] }, For { iter: "__i_j", n_iter: Identifer("_q__q_1"), body: [Let { target: Identifier("b"), expr: Literal(Teer(exile)) }, Let { target: Identifier("aaa_1331"), expr: Literal(Bool(true)) }, Return { expr: Literal(Teer(empty)) }, Let { target: Identifier("a__asd__a"), expr: Identifer("__a_q") }] }, Let { target: Identifier("a__asd__a"), expr: Identifer("__a_q") }] }, Let { target: Identifier("a__asd__a"), expr: Identifer("__a_q") }]