[Let { ident: "a", expr: Literal(Int(1)) }, Return { expr: Add { left: Literal(Int(133)), right: Literal(Int(244)) } }, Let { ident: "__b_qwc13", expr: Literal(Float(-2.4124355)) }, Let { ident: "a", expr: Literal(String("hello world")) }, Let { ident: "z", expr: Not(Packed(Add { left: Literal(Int(100)), right: Packed(Div { left: Literal(Int(200)), right: Add { left: Literal(Int(244)), right: Packed(Mul { left: Neg(Literal(Bool(true))), right: Call { name: "add", args: [Identifer("teer"), Literal(String("Hello world")), Literal(Bool(false)), Literal(Teer(exile))] } }) } }) })) }, Let { ident: "aaa_1331", expr: Literal(Bool(true)) }, Let { ident: "a__asd__a", expr: Identifer("__a_q") }, For { iter: "__i_j", n_iter:
 Div { left: Neg(Packed(Add { left: Literal(Bool(true)), right: Add { left: Literal(Int(113)), right: Packed(Mul { left: Identifer("teer"), right: Identifer("__hello_world___") }) } })), right: Packed(Mul { left: Identifer("__self_builtin"), right: Packed(Mul { left: Literal(Bool(false)), right: Literal(Teer(empty)) }) }) }, body: [Let { ident: "b", expr: Literal(Teer(exile)) }, Let { ident: "aaa_1331", expr: Literal(Bool(true)) }, Let { ident: "a__asd__a", expr: Identifer("__a_q") }] }, Let { ident: "a__asd__a", expr: Identifer("__a_q") }, Let { ident: "b", expr: Literal(Teer(exile)) }, For { iter: "__i_j", n_iter: Identifer("_q__q_1"), body: [FuncDef { name: "a", params: ["q", "w", "e", "r__q_11_q", "zzz"], body: [Let { ident: "b", expr: Literal(Teer(exile)) }, Let { ident: "aaa_1331", expr: Literal(Bool(true)) }, If { cond: Identifer("teer"), body: [While { cond: Identifer("teer"), body: [Let { ident: "xxx", expr: Identifer("uuu") }, Let { ident: "xxx", expr: Literal(Teer(exile)) }] }] }] }, Let { ident: "b", expr: Literal(Teer(exile)) }, Let { ident: "aaa_1331", expr: Literal(Bool(true)) }, If { cond: Identifer("teer"), body: [While { cond: Identifer("teer"), body: [Let { ident: "xxx", expr: Identifer("uuu") }, Let { ident: "xxx", expr: Literal(Teer(exile)) }, IfElse { cond: Identifer("aasdasd"), if_body: [Let { ident: "xxx", expr: Identifer("uuu") }, Let { ident: "xxx", expr: Literal(Teer(exile)) }], else_body: [While { cond: Literal(Float(1.41244)), body: [Print { expr: Identifer("b") }, Print { expr: Literal(Float(-114.514)) }, Let { ident: "a", expr: Literal(Int(1)) }] }, Return { expr: Literal(Int(2)) }] }, Let { ident: "zzz__", expr: Literal(String("qwee")) }] }, For { iter: "__i_j", n_iter: Identifer("_q__q_1"), body: [Let { ident: "b", expr: Literal(Teer(exile)) }, Let { ident: "aaa_1331", expr: Literal(Bool(true)) }, Return { expr: Literal(Teer(empty)) }, Let { ident: "a__asd__a", expr: Identifer("__a_q") }] }, Let { ident: "a", expr: Literal(Int(1)) }, Let { ident: "b", expr: Literal(Float(-12.2411)) }] }, For { iter: "__i_j", n_iter: Identifer("_q__q_1"), body: [Let { ident: "b", expr: Literal(Teer(exile)) }, Let { ident: "aaa_1331", expr: Literal(Bool(true)) }, Return { expr: Literal(Teer(empty)) }, Let { ident: "a__asd__a", expr: Identifer("__a_q") }] }, Let { ident: "a__asd__a", expr: Identifer("__a_q") }] }, Let { ident: "a__asd__a", expr: Identifer("__a_q") }]