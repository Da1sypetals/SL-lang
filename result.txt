[Let { ident: "a", expr: Literal(Int(1)) }, Return { expr: Literal(Int(133)) }, Let { ident: "__b_qwc13", expr: Literal(Float(-2.4124355)) }, Let { ident: "a", expr: Literal(String("hello world")) }, Let { ident: "b", expr: Literal(Teer(exile)) }, Let { ident: "aaa_1331", expr: Literal(Bool(true)) }, Let { ident: "a__asd__a", expr: Identifer("__a_q") }, For { iter: "__i_j", n_iter: Literal(Int(133)), body: [Let { ident: "b", expr: Literal(Teer(exile)) }, Let { ident: "aaa_1331", expr: Literal(Bool(true)) }, Let { ident: "a__asd__a", expr: Identifer("__a_q") }] }, Let { ident: "a__asd__a", expr: Identifer("__a_q") }, Let { ident: "b", expr: Literal(Teer(exile)) }, For { iter: "__i_j", n_iter: Identifer("_q__q_1"), body: 
[FuncDef { name: "a", 
args: ["q", "w", "e", "r__q_11_q", "zzz"],
 body: 
 [Let { ident: "b", expr: Literal(Teer(exile)) }
 , Let
  { ident: "aaa_1331", 
  expr: Literal(Bool(true)) }, 
  If { cond: Identifer("teer"),
   body: 
   [While { cond: Identifer("teer"),
   body: 
   [Let { ident: "xxx", expr: Identifer("uuu") }
   , Let { ident: "xxx",
    expr: Literal(Teer(exile)) }] }] }] },
     Let { ident: "b", expr: Literal(Teer(exile)) }, Let { ident: "aaa_1331", expr: Literal(Bool(true)) }, If { cond: Identifer("teer"), body: [While { cond: Identifer("teer"), body: [Let { ident: "xxx", expr: Identifer("uuu") }, Let { ident: "xxx", expr: Literal(Teer(exile)) }, IfElse { cond: Identifer("aasdasd"), if_body: [Let { ident: "xxx", expr: Identifer("uuu") }, Let { ident: "xxx", expr: Literal(Teer(exile)) }], else_body: [While { cond: Literal(Float(1.41244)), body: [Let { ident: "a", expr: Literal(Int(1)) }] }, Return { expr: Literal(Int(2)) }] }, Let { ident: "zzz__", expr: Literal(String("qwee")) }] }, For { iter: "__i_j", n_iter: Identifer("_q__q_1"), body: [Let { ident: "b", expr: Literal(Teer(exile)) }, Let { ident: "aaa_1331", expr: Literal(Bool(true)) }, Return { expr: Literal(Teer(empty)) }, Let { ident: "a__asd__a", expr: Identifer("__a_q") }] }, Let { ident: "a", expr: Literal(Int(1)) }, Let { ident: "b", expr: Literal(Float(-12.2411)) }] }, For { iter: "__i_j", n_iter: Identifer("_q__q_1"), body: [Let { ident: "b", expr: Literal(Teer(exile)) }, Let { ident: "aaa_1331", expr: Literal(Bool(true)) }, Return { expr: Literal(Teer(empty)) }, Let { ident: "a__asd__a", expr: Identifer("__a_q") }] }, Let { ident: "a__asd__a", expr: Identifer("__a_q") }] }, Let { ident: "a__asd__a", expr: Identifer("__a_q") }]